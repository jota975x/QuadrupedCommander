{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyN6Y3dWreivcJ0YZNyAj1nc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q4qmBLLJ7tyj","executionInfo":{"status":"ok","timestamp":1733684878024,"user_tz":300,"elapsed":1202,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"18a75159-8f3e-40c2-a354-aff3015f89c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder\n"]}],"source":["# Cell 1\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Cell 2\n","%cd /content/drive/MyDrive/GT_Semester3/Deep\\ RL\\ \\(CS\\ 8803\\ DRL\\)/Project/rlds_dataset_builder"]},{"cell_type":"code","source":["!pip install pybullet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blEVWZIQ70PJ","executionInfo":{"status":"ok","timestamp":1733684289500,"user_tz":300,"elapsed":2159,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"c6500820-d716-4ae8-c7a2-67562e0ec44d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pybullet in /usr/local/lib/python3.10/dist-packages (3.2.6)\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"782q1QfT78Lp","executionInfo":{"status":"ok","timestamp":1733684291293,"user_tz":300,"elapsed":230,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"050ae779-2072-4119-c515-7e23bf1efab9"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["%cd example_dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hU6LXxW779HF","executionInfo":{"status":"ok","timestamp":1733657753022,"user_tz":300,"elapsed":388,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"6f509329-eb48-492f-dfd8-58ecbce497a9"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder/example_dataset\n"]}]},{"cell_type":"code","source":["!python3 create_example_data.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tkctc7NIDfM1","executionInfo":{"status":"ok","timestamp":1733657898651,"user_tz":300,"elapsed":138313,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"1e75a08b-2a00-4d9d-e0cb-929786e234aa"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Generating train examples...\n","100% 100/100 [01:10<00:00,  1.41it/s]\n","Generating val examples...\n","100% 100/100 [01:06<00:00,  1.51it/s]\n","Successfully created example data!\n"]}]},{"cell_type":"code","source":["!tfds build"],"metadata":{"id":"-VAkRPBsDhE4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install mlcroissant"],"metadata":{"id":"0YKu_GhnDidt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%cd Dataset/images_0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Qn6rK-4L2E6","executionInfo":{"status":"ok","timestamp":1733659987093,"user_tz":300,"elapsed":347,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"42666ff2-8522-44fa-e171-370dacb24b27"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/Dataset/images_0\n"]}]},{"cell_type":"code","source":["from PIL import Image\n","\n","image = Image.open(\"image_0.png\").convert(\"RGB\")  # Ensure RGB mode\n"],"metadata":{"id":"ASOQcCYaEkC2","executionInfo":{"status":"ok","timestamp":1733660445117,"user_tz":300,"elapsed":882,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["image.size"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ihMkDiAFNiAa","executionInfo":{"status":"ok","timestamp":1733660496116,"user_tz":300,"elapsed":266,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"485dc64c-074c-4d1b-e311-2592b5a34226"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1280, 960)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["base_commands = [\n","    \"Navigate to the {object}\",\n","    \"Move toward the {object}\",\n","    \"Approach the {object}'s location\",\n","    \"Head over to the {object}\",\n","    \"Go closer to the {object}\",\n","    \"Proceed toward the {object}\",\n","    \"Make your way to the {object}\",\n","    \"Move in the direction of the {object}\",\n","    \"Step nearer to the {object}\",\n","    \"Shift over to the {object}\",\n","    \"Come closer to the {object}\",\n","    \"Draw near to the {object}\",\n","    \"Travel to the {object}'s position\",\n","    \"Relocate to the {object}\",\n","    \"Advance to the {object}\",\n","    \"Direct yourself toward the {object}\",\n","    \"Align your position with the {object}\",\n","    \"Walk up to the {object}\",\n","    \"Close the distance to the {object}\",\n","    \"Position yourself near the {object}\",\n","    \"Adjust your path to reach the {object}\",\n","    \"Head directly to the {object}\",\n","    \"Target the {object}'s location\",\n","    \"Zero in on the {object}\",\n","    \"Engage approach to the {object}\",\n","    \"Progress toward the {object}'s vicinity\",\n","    \"Focus your movement on the {object}\",\n","    \"Move within proximity of the {object}\",\n","    \"Reach the {object}'s location\",\n","    \"Step forward to the {object}\"\n","]\n","\n","base_commands_dict = {\n","    1: \"Navigate to the {object}\",\n","    2: \"Move toward the {object}\",\n","    3: \"Approach the {object}'s location\",\n","    4: \"Head over to the {object}\",\n","    5: \"Go closer to the {object}\",\n","    6: \"Proceed toward the {object}\",\n","    7: \"Make your way to the {object}\",\n","    8: \"Move in the direction of the {object}\",\n","    9: \"Step nearer to the {object}\",\n","    10: \"Shift over to the {object}\",\n","    11: \"Come closer to the {object}\",\n","    12: \"Draw near to the {object}\",\n","    13: \"Travel to the {object}'s position\",\n","    14: \"Relocate to the {object}\",\n","    15: \"Advance to the {object}\",\n","    16: \"Direct yourself toward the {object}\",\n","    17: \"Align your position with the {object}\",\n","    18: \"Walk up to the {object}\",\n","    19: \"Close the distance to the {object}\",\n","    20: \"Position yourself near the {object}\",\n","    21: \"Adjust your path to reach the {object}\",\n","    22: \"Head directly to the {object}\",\n","    23: \"Target the {object}'s location\",\n","    24: \"Zero in on the {object}\",\n","    25: \"Engage approach to the {object}\",\n","    26: \"Progress toward the {object}'s vicinity\",\n","    27: \"Focus your movement on the {object}\",\n","    28: \"Move within proximity of the {object}\",\n","    29: \"Reach the {object}'s location\",\n","    30: \"Step forward to the {object}\"\n","}\n","\n"],"metadata":{"id":"N21MKszYNxTk","executionInfo":{"status":"ok","timestamp":1733661273200,"user_tz":300,"elapsed":214,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["objects = [\"dog\", \"cow\", \"pineapple\", \"cat\", \"beach ball\"]\n","training_text = [command.format(object=obj) for obj in objects for command in base_commands]"],"metadata":{"id":"mBIQ_ulHPXmE","executionInfo":{"status":"ok","timestamp":1733661274768,"user_tz":300,"elapsed":212,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["training_text[0:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fo9Nc4WXP02e","executionInfo":{"status":"ok","timestamp":1733661281287,"user_tz":300,"elapsed":317,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"8120031a-e993-4a08-8a71-deeac6587289"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Navigate to the dog',\n"," 'Move toward the dog',\n"," \"Approach the dog's location\",\n"," 'Head over to the dog',\n"," 'Go closer to the dog',\n"," 'Proceed toward the dog',\n"," 'Make your way to the dog',\n"," 'Move in the direction of the dog',\n"," 'Step nearer to the dog',\n"," 'Shift over to the dog']"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# Move to images directory\n","%cd /content/drive/MyDrive/GT_Semester3/Deep\\ RL\\ \\(CS\\ 8803\\ DRL\\)/Project/Dataset/images_0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mvERQHH1P1tl","executionInfo":{"status":"ok","timestamp":1733663776076,"user_tz":300,"elapsed":221,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"48c2d0e7-a671-4238-9ece-edc61921da0a"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/Dataset/images_0\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Define the folder containing the images\n","folder_path = \"./\"\n","\n","# Create a dictionary with integers as keys and the full image paths as values\n","image_paths_dict = {\n","    i: file\n","    for i, file in enumerate(sorted(os.listdir(folder_path)))\n","    if file.endswith(('.png'))\n","}\n","\n","print(image_paths_dict)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XQ1nThy4Rh-S","executionInfo":{"status":"ok","timestamp":1733663779377,"user_tz":300,"elapsed":341,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"3ee26cac-0fdb-4d82-b6fe-ef4217f85821"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: 'image_0.png', 1: 'image_1.png', 2: 'image_10.png', 3: 'image_100.png', 4: 'image_101.png', 5: 'image_102.png', 6: 'image_103.png', 7: 'image_104.png', 8: 'image_105.png', 9: 'image_106.png', 10: 'image_107.png', 11: 'image_108.png', 12: 'image_109.png', 13: 'image_11.png', 14: 'image_110.png', 15: 'image_111.png', 16: 'image_112.png', 17: 'image_113.png', 18: 'image_114.png', 19: 'image_115.png', 20: 'image_116.png', 21: 'image_117.png', 22: 'image_118.png', 23: 'image_119.png', 24: 'image_12.png', 25: 'image_120.png', 26: 'image_121.png', 27: 'image_122.png', 28: 'image_123.png', 29: 'image_124.png', 30: 'image_125.png', 31: 'image_126.png', 32: 'image_127.png', 33: 'image_128.png', 34: 'image_129.png', 35: 'image_13.png', 36: 'image_130.png', 37: 'image_131.png', 38: 'image_132.png', 39: 'image_133.png', 40: 'image_134.png', 41: 'image_135.png', 42: 'image_136.png', 43: 'image_137.png', 44: 'image_138.png', 45: 'image_139.png', 46: 'image_14.png', 47: 'image_140.png', 48: 'image_141.png', 49: 'image_142.png', 50: 'image_143.png', 51: 'image_144.png', 52: 'image_145.png', 53: 'image_146.png', 54: 'image_147.png', 55: 'image_148.png', 56: 'image_149.png', 57: 'image_15.png', 58: 'image_150.png', 59: 'image_151.png', 60: 'image_152.png', 61: 'image_153.png', 62: 'image_154.png', 63: 'image_155.png', 64: 'image_156.png', 65: 'image_157.png', 66: 'image_158.png', 67: 'image_159.png', 68: 'image_16.png', 69: 'image_160.png', 70: 'image_161.png', 71: 'image_162.png', 72: 'image_163.png', 73: 'image_164.png', 74: 'image_165.png', 75: 'image_166.png', 76: 'image_167.png', 77: 'image_168.png', 78: 'image_169.png', 79: 'image_17.png', 80: 'image_170.png', 81: 'image_171.png', 82: 'image_172.png', 83: 'image_173.png', 84: 'image_174.png', 85: 'image_175.png', 86: 'image_176.png', 87: 'image_177.png', 88: 'image_178.png', 89: 'image_179.png', 90: 'image_18.png', 91: 'image_180.png', 92: 'image_181.png', 93: 'image_182.png', 94: 'image_183.png', 95: 'image_184.png', 96: 'image_185.png', 97: 'image_186.png', 98: 'image_187.png', 99: 'image_188.png', 100: 'image_189.png', 101: 'image_19.png', 102: 'image_190.png', 103: 'image_191.png', 104: 'image_192.png', 105: 'image_193.png', 106: 'image_194.png', 107: 'image_195.png', 108: 'image_196.png', 109: 'image_197.png', 110: 'image_198.png', 111: 'image_199.png', 112: 'image_2.png', 113: 'image_20.png', 114: 'image_200.png', 115: 'image_201.png', 116: 'image_202.png', 117: 'image_203.png', 118: 'image_204.png', 119: 'image_205.png', 120: 'image_206.png', 121: 'image_207.png', 122: 'image_208.png', 123: 'image_209.png', 124: 'image_21.png', 125: 'image_210.png', 126: 'image_211.png', 127: 'image_212.png', 128: 'image_213.png', 129: 'image_214.png', 130: 'image_215.png', 131: 'image_216.png', 132: 'image_217.png', 133: 'image_218.png', 134: 'image_219.png', 135: 'image_22.png', 136: 'image_220.png', 137: 'image_221.png', 138: 'image_222.png', 139: 'image_223.png', 140: 'image_224.png', 141: 'image_225.png', 142: 'image_226.png', 143: 'image_227.png', 144: 'image_228.png', 145: 'image_229.png', 146: 'image_23.png', 147: 'image_230.png', 148: 'image_231.png', 149: 'image_232.png', 150: 'image_233.png', 151: 'image_234.png', 152: 'image_235.png', 153: 'image_236.png', 154: 'image_237.png', 155: 'image_238.png', 156: 'image_239.png', 157: 'image_24.png', 158: 'image_240.png', 159: 'image_241.png', 160: 'image_242.png', 161: 'image_243.png', 162: 'image_244.png', 163: 'image_245.png', 164: 'image_246.png', 165: 'image_247.png', 166: 'image_248.png', 167: 'image_249.png', 168: 'image_25.png', 169: 'image_250.png', 170: 'image_251.png', 171: 'image_252.png', 172: 'image_253.png', 173: 'image_254.png', 174: 'image_255.png', 175: 'image_256.png', 176: 'image_257.png', 177: 'image_258.png', 178: 'image_259.png', 179: 'image_26.png', 180: 'image_260.png', 181: 'image_261.png', 182: 'image_262.png', 183: 'image_263.png', 184: 'image_264.png', 185: 'image_265.png', 186: 'image_266.png', 187: 'image_267.png', 188: 'image_268.png', 189: 'image_269.png', 190: 'image_27.png', 191: 'image_270.png', 192: 'image_271.png', 193: 'image_272.png', 194: 'image_273.png', 195: 'image_274.png', 196: 'image_275.png', 197: 'image_276.png', 198: 'image_277.png', 199: 'image_278.png', 200: 'image_279.png', 201: 'image_28.png', 202: 'image_280.png', 203: 'image_281.png', 204: 'image_282.png', 205: 'image_283.png', 206: 'image_284.png', 207: 'image_285.png', 208: 'image_286.png', 209: 'image_287.png', 210: 'image_288.png', 211: 'image_289.png', 212: 'image_29.png', 213: 'image_290.png', 214: 'image_291.png', 215: 'image_292.png', 216: 'image_293.png', 217: 'image_294.png', 218: 'image_295.png', 219: 'image_296.png', 220: 'image_297.png', 221: 'image_298.png', 222: 'image_299.png', 223: 'image_3.png', 224: 'image_30.png', 225: 'image_300.png', 226: 'image_301.png', 227: 'image_302.png', 228: 'image_303.png', 229: 'image_304.png', 230: 'image_305.png', 231: 'image_306.png', 232: 'image_307.png', 233: 'image_308.png', 234: 'image_309.png', 235: 'image_31.png', 236: 'image_310.png', 237: 'image_311.png', 238: 'image_312.png', 239: 'image_313.png', 240: 'image_314.png', 241: 'image_315.png', 242: 'image_316.png', 243: 'image_317.png', 244: 'image_318.png', 245: 'image_319.png', 246: 'image_32.png', 247: 'image_320.png', 248: 'image_321.png', 249: 'image_322.png', 250: 'image_323.png', 251: 'image_324.png', 252: 'image_325.png', 253: 'image_326.png', 254: 'image_327.png', 255: 'image_328.png', 256: 'image_329.png', 257: 'image_33.png', 258: 'image_330.png', 259: 'image_331.png', 260: 'image_332.png', 261: 'image_333.png', 262: 'image_334.png', 263: 'image_335.png', 264: 'image_336.png', 265: 'image_337.png', 266: 'image_338.png', 267: 'image_339.png', 268: 'image_34.png', 269: 'image_340.png', 270: 'image_341.png', 271: 'image_342.png', 272: 'image_343.png', 273: 'image_344.png', 274: 'image_345.png', 275: 'image_346.png', 276: 'image_347.png', 277: 'image_348.png', 278: 'image_349.png', 279: 'image_35.png', 280: 'image_350.png', 281: 'image_351.png', 282: 'image_352.png', 283: 'image_353.png', 284: 'image_354.png', 285: 'image_355.png', 286: 'image_356.png', 287: 'image_357.png', 288: 'image_358.png', 289: 'image_359.png', 290: 'image_36.png', 291: 'image_360.png', 292: 'image_361.png', 293: 'image_362.png', 294: 'image_363.png', 295: 'image_364.png', 296: 'image_365.png', 297: 'image_366.png', 298: 'image_367.png', 299: 'image_368.png', 300: 'image_369.png', 301: 'image_37.png', 302: 'image_370.png', 303: 'image_371.png', 304: 'image_372.png', 305: 'image_373.png', 306: 'image_374.png', 307: 'image_375.png', 308: 'image_376.png', 309: 'image_377.png', 310: 'image_378.png', 311: 'image_379.png', 312: 'image_38.png', 313: 'image_380.png', 314: 'image_381.png', 315: 'image_382.png', 316: 'image_383.png', 317: 'image_384.png', 318: 'image_385.png', 319: 'image_386.png', 320: 'image_387.png', 321: 'image_388.png', 322: 'image_389.png', 323: 'image_39.png', 324: 'image_390.png', 325: 'image_391.png', 326: 'image_392.png', 327: 'image_393.png', 328: 'image_394.png', 329: 'image_395.png', 330: 'image_396.png', 331: 'image_397.png', 332: 'image_398.png', 333: 'image_399.png', 334: 'image_4.png', 335: 'image_40.png', 336: 'image_400.png', 337: 'image_401.png', 338: 'image_402.png', 339: 'image_403.png', 340: 'image_404.png', 341: 'image_405.png', 342: 'image_406.png', 343: 'image_407.png', 344: 'image_408.png', 345: 'image_409.png', 346: 'image_41.png', 347: 'image_410.png', 348: 'image_411.png', 349: 'image_412.png', 350: 'image_413.png', 351: 'image_414.png', 352: 'image_415.png', 353: 'image_416.png', 354: 'image_417.png', 355: 'image_418.png', 356: 'image_419.png', 357: 'image_42.png', 358: 'image_420.png', 359: 'image_421.png', 360: 'image_422.png', 361: 'image_423.png', 362: 'image_424.png', 363: 'image_425.png', 364: 'image_426.png', 365: 'image_427.png', 366: 'image_428.png', 367: 'image_429.png', 368: 'image_43.png', 369: 'image_430.png', 370: 'image_431.png', 371: 'image_432.png', 372: 'image_433.png', 373: 'image_434.png', 374: 'image_435.png', 375: 'image_436.png', 376: 'image_437.png', 377: 'image_438.png', 378: 'image_439.png', 379: 'image_44.png', 380: 'image_440.png', 381: 'image_441.png', 382: 'image_442.png', 383: 'image_443.png', 384: 'image_444.png', 385: 'image_445.png', 386: 'image_446.png', 387: 'image_447.png', 388: 'image_448.png', 389: 'image_449.png', 390: 'image_45.png', 391: 'image_450.png', 392: 'image_451.png', 393: 'image_452.png', 394: 'image_453.png', 395: 'image_454.png', 396: 'image_455.png', 397: 'image_456.png', 398: 'image_457.png', 399: 'image_458.png', 400: 'image_459.png', 401: 'image_46.png', 402: 'image_460.png', 403: 'image_461.png', 404: 'image_462.png', 405: 'image_463.png', 406: 'image_464.png', 407: 'image_465.png', 408: 'image_466.png', 409: 'image_467.png', 410: 'image_468.png', 411: 'image_469.png', 412: 'image_47.png', 413: 'image_470.png', 414: 'image_471.png', 415: 'image_472.png', 416: 'image_473.png', 417: 'image_474.png', 418: 'image_475.png', 419: 'image_476.png', 420: 'image_477.png', 421: 'image_478.png', 422: 'image_479.png', 423: 'image_48.png', 424: 'image_480.png', 425: 'image_481.png', 426: 'image_482.png', 427: 'image_483.png', 428: 'image_484.png', 429: 'image_485.png', 430: 'image_486.png', 431: 'image_487.png', 432: 'image_488.png', 433: 'image_489.png', 434: 'image_49.png', 435: 'image_490.png', 436: 'image_491.png', 437: 'image_492.png', 438: 'image_493.png', 439: 'image_494.png', 440: 'image_495.png', 441: 'image_496.png', 442: 'image_497.png', 443: 'image_498.png', 444: 'image_499.png', 445: 'image_5.png', 446: 'image_50.png', 447: 'image_500.png', 448: 'image_501.png', 449: 'image_502.png', 450: 'image_503.png', 451: 'image_504.png', 452: 'image_505.png', 453: 'image_506.png', 454: 'image_507.png', 455: 'image_508.png', 456: 'image_509.png', 457: 'image_51.png', 458: 'image_510.png', 459: 'image_511.png', 460: 'image_512.png', 461: 'image_513.png', 462: 'image_514.png', 463: 'image_515.png', 464: 'image_516.png', 465: 'image_517.png', 466: 'image_518.png', 467: 'image_519.png', 468: 'image_52.png', 469: 'image_520.png', 470: 'image_521.png', 471: 'image_522.png', 472: 'image_523.png', 473: 'image_524.png', 474: 'image_525.png', 475: 'image_526.png', 476: 'image_527.png', 477: 'image_528.png', 478: 'image_529.png', 479: 'image_53.png', 480: 'image_530.png', 481: 'image_531.png', 482: 'image_532.png', 483: 'image_533.png', 484: 'image_534.png', 485: 'image_535.png', 486: 'image_536.png', 487: 'image_537.png', 488: 'image_538.png', 489: 'image_539.png', 490: 'image_54.png', 491: 'image_540.png', 492: 'image_541.png', 493: 'image_542.png', 494: 'image_543.png', 495: 'image_544.png', 496: 'image_545.png', 497: 'image_546.png', 498: 'image_547.png', 499: 'image_548.png', 500: 'image_549.png', 501: 'image_55.png', 502: 'image_550.png', 503: 'image_551.png', 504: 'image_552.png', 505: 'image_553.png', 506: 'image_554.png', 507: 'image_555.png', 508: 'image_556.png', 509: 'image_557.png', 510: 'image_558.png', 511: 'image_559.png', 512: 'image_56.png', 513: 'image_560.png', 514: 'image_561.png', 515: 'image_562.png', 516: 'image_563.png', 517: 'image_564.png', 518: 'image_565.png', 519: 'image_566.png', 520: 'image_567.png', 521: 'image_568.png', 522: 'image_569.png', 523: 'image_57.png', 524: 'image_570.png', 525: 'image_571.png', 526: 'image_572.png', 527: 'image_573.png', 528: 'image_574.png', 529: 'image_575.png', 530: 'image_576.png', 531: 'image_577.png', 532: 'image_578.png', 533: 'image_579.png', 534: 'image_58.png', 535: 'image_580.png', 536: 'image_581.png', 537: 'image_582.png', 538: 'image_583.png', 539: 'image_584.png', 540: 'image_585.png', 541: 'image_586.png', 542: 'image_587.png', 543: 'image_588.png', 544: 'image_589.png', 545: 'image_59.png', 546: 'image_590.png', 547: 'image_591.png', 548: 'image_592.png', 549: 'image_593.png', 550: 'image_594.png', 551: 'image_595.png', 552: 'image_596.png', 553: 'image_597.png', 554: 'image_598.png', 555: 'image_599.png', 556: 'image_6.png', 557: 'image_60.png', 558: 'image_600.png', 559: 'image_601.png', 560: 'image_602.png', 561: 'image_603.png', 562: 'image_604.png', 563: 'image_605.png', 564: 'image_606.png', 565: 'image_607.png', 566: 'image_608.png', 567: 'image_609.png', 568: 'image_61.png', 569: 'image_610.png', 570: 'image_611.png', 571: 'image_612.png', 572: 'image_613.png', 573: 'image_614.png', 574: 'image_615.png', 575: 'image_616.png', 576: 'image_617.png', 577: 'image_618.png', 578: 'image_619.png', 579: 'image_62.png', 580: 'image_620.png', 581: 'image_621.png', 582: 'image_622.png', 583: 'image_623.png', 584: 'image_624.png', 585: 'image_625.png', 586: 'image_626.png', 587: 'image_627.png', 588: 'image_628.png', 589: 'image_629.png', 590: 'image_63.png', 591: 'image_630.png', 592: 'image_631.png', 593: 'image_632.png', 594: 'image_633.png', 595: 'image_634.png', 596: 'image_635.png', 597: 'image_636.png', 598: 'image_637.png', 599: 'image_638.png', 600: 'image_639.png', 601: 'image_64.png', 602: 'image_640.png', 603: 'image_641.png', 604: 'image_642.png', 605: 'image_643.png', 606: 'image_644.png', 607: 'image_645.png', 608: 'image_646.png', 609: 'image_647.png', 610: 'image_648.png', 611: 'image_649.png', 612: 'image_65.png', 613: 'image_650.png', 614: 'image_651.png', 615: 'image_652.png', 616: 'image_653.png', 617: 'image_654.png', 618: 'image_655.png', 619: 'image_656.png', 620: 'image_657.png', 621: 'image_658.png', 622: 'image_659.png', 623: 'image_66.png', 624: 'image_660.png', 625: 'image_661.png', 626: 'image_662.png', 627: 'image_663.png', 628: 'image_664.png', 629: 'image_665.png', 630: 'image_666.png', 631: 'image_667.png', 632: 'image_668.png', 633: 'image_669.png', 634: 'image_67.png', 635: 'image_670.png', 636: 'image_671.png', 637: 'image_672.png', 638: 'image_673.png', 639: 'image_674.png', 640: 'image_675.png', 641: 'image_676.png', 642: 'image_677.png', 643: 'image_678.png', 644: 'image_679.png', 645: 'image_68.png', 646: 'image_680.png', 647: 'image_681.png', 648: 'image_682.png', 649: 'image_683.png', 650: 'image_684.png', 651: 'image_685.png', 652: 'image_686.png', 653: 'image_687.png', 654: 'image_688.png', 655: 'image_689.png', 656: 'image_69.png', 657: 'image_690.png', 658: 'image_691.png', 659: 'image_692.png', 660: 'image_693.png', 661: 'image_694.png', 662: 'image_695.png', 663: 'image_696.png', 664: 'image_697.png', 665: 'image_698.png', 666: 'image_699.png', 667: 'image_7.png', 668: 'image_70.png', 669: 'image_700.png', 670: 'image_701.png', 671: 'image_702.png', 672: 'image_703.png', 673: 'image_704.png', 674: 'image_705.png', 675: 'image_706.png', 676: 'image_707.png', 677: 'image_708.png', 678: 'image_709.png', 679: 'image_71.png', 680: 'image_710.png', 681: 'image_711.png', 682: 'image_712.png', 683: 'image_713.png', 684: 'image_714.png', 685: 'image_715.png', 686: 'image_716.png', 687: 'image_717.png', 688: 'image_718.png', 689: 'image_719.png', 690: 'image_72.png', 691: 'image_720.png', 692: 'image_721.png', 693: 'image_722.png', 694: 'image_723.png', 695: 'image_724.png', 696: 'image_725.png', 697: 'image_726.png', 698: 'image_727.png', 699: 'image_728.png', 700: 'image_729.png', 701: 'image_73.png', 702: 'image_730.png', 703: 'image_731.png', 704: 'image_732.png', 705: 'image_733.png', 706: 'image_734.png', 707: 'image_735.png', 708: 'image_736.png', 709: 'image_737.png', 710: 'image_738.png', 711: 'image_739.png', 712: 'image_74.png', 713: 'image_740.png', 714: 'image_741.png', 715: 'image_742.png', 716: 'image_743.png', 717: 'image_744.png', 718: 'image_745.png', 719: 'image_746.png', 720: 'image_747.png', 721: 'image_748.png', 722: 'image_749.png', 723: 'image_75.png', 724: 'image_750.png', 725: 'image_751.png', 726: 'image_752.png', 727: 'image_753.png', 728: 'image_754.png', 729: 'image_755.png', 730: 'image_756.png', 731: 'image_757.png', 732: 'image_758.png', 733: 'image_759.png', 734: 'image_76.png', 735: 'image_760.png', 736: 'image_761.png', 737: 'image_762.png', 738: 'image_763.png', 739: 'image_764.png', 740: 'image_765.png', 741: 'image_766.png', 742: 'image_767.png', 743: 'image_768.png', 744: 'image_769.png', 745: 'image_77.png', 746: 'image_770.png', 747: 'image_771.png', 748: 'image_772.png', 749: 'image_773.png', 750: 'image_774.png', 751: 'image_775.png', 752: 'image_776.png', 753: 'image_777.png', 754: 'image_778.png', 755: 'image_779.png', 756: 'image_78.png', 757: 'image_780.png', 758: 'image_781.png', 759: 'image_782.png', 760: 'image_783.png', 761: 'image_784.png', 762: 'image_785.png', 763: 'image_786.png', 764: 'image_787.png', 765: 'image_788.png', 766: 'image_789.png', 767: 'image_79.png', 768: 'image_790.png', 769: 'image_791.png', 770: 'image_792.png', 771: 'image_793.png', 772: 'image_794.png', 773: 'image_795.png', 774: 'image_796.png', 775: 'image_797.png', 776: 'image_798.png', 777: 'image_799.png', 778: 'image_8.png', 779: 'image_80.png', 780: 'image_800.png', 781: 'image_801.png', 782: 'image_802.png', 783: 'image_803.png', 784: 'image_804.png', 785: 'image_805.png', 786: 'image_806.png', 787: 'image_807.png', 788: 'image_808.png', 789: 'image_809.png', 790: 'image_81.png', 791: 'image_810.png', 792: 'image_811.png', 793: 'image_812.png', 794: 'image_813.png', 795: 'image_814.png', 796: 'image_815.png', 797: 'image_816.png', 798: 'image_817.png', 799: 'image_818.png', 800: 'image_819.png', 801: 'image_82.png', 802: 'image_820.png', 803: 'image_821.png', 804: 'image_822.png', 805: 'image_823.png', 806: 'image_824.png', 807: 'image_825.png', 808: 'image_826.png', 809: 'image_827.png', 810: 'image_828.png', 811: 'image_829.png', 812: 'image_83.png', 813: 'image_830.png', 814: 'image_831.png', 815: 'image_832.png', 816: 'image_833.png', 817: 'image_834.png', 818: 'image_835.png', 819: 'image_836.png', 820: 'image_837.png', 821: 'image_838.png', 822: 'image_839.png', 823: 'image_84.png', 824: 'image_840.png', 825: 'image_841.png', 826: 'image_842.png', 827: 'image_843.png', 828: 'image_844.png', 829: 'image_845.png', 830: 'image_846.png', 831: 'image_847.png', 832: 'image_848.png', 833: 'image_849.png', 834: 'image_85.png', 835: 'image_850.png', 836: 'image_851.png', 837: 'image_852.png', 838: 'image_853.png', 839: 'image_854.png', 840: 'image_855.png', 841: 'image_856.png', 842: 'image_857.png', 843: 'image_858.png', 844: 'image_859.png', 845: 'image_86.png', 846: 'image_860.png', 847: 'image_861.png', 848: 'image_862.png', 849: 'image_863.png', 850: 'image_864.png', 851: 'image_865.png', 852: 'image_866.png', 853: 'image_867.png', 854: 'image_868.png', 855: 'image_869.png', 856: 'image_87.png', 857: 'image_870.png', 858: 'image_871.png', 859: 'image_872.png', 860: 'image_873.png', 861: 'image_874.png', 862: 'image_875.png', 863: 'image_876.png', 864: 'image_877.png', 865: 'image_878.png', 866: 'image_879.png', 867: 'image_88.png', 868: 'image_880.png', 869: 'image_881.png', 870: 'image_882.png', 871: 'image_883.png', 872: 'image_884.png', 873: 'image_885.png', 874: 'image_886.png', 875: 'image_887.png', 876: 'image_888.png', 877: 'image_889.png', 878: 'image_89.png', 879: 'image_890.png', 880: 'image_891.png', 881: 'image_892.png', 882: 'image_893.png', 883: 'image_894.png', 884: 'image_895.png', 885: 'image_896.png', 886: 'image_897.png', 887: 'image_898.png', 888: 'image_899.png', 889: 'image_9.png', 890: 'image_90.png', 891: 'image_900.png', 892: 'image_901.png', 893: 'image_902.png', 894: 'image_903.png', 895: 'image_904.png', 896: 'image_905.png', 897: 'image_906.png', 898: 'image_907.png', 899: 'image_908.png', 900: 'image_909.png', 901: 'image_91.png', 902: 'image_910.png', 903: 'image_911.png', 904: 'image_912.png', 905: 'image_913.png', 906: 'image_914.png', 907: 'image_915.png', 908: 'image_916.png', 909: 'image_917.png', 910: 'image_918.png', 911: 'image_919.png', 912: 'image_92.png', 913: 'image_920.png', 914: 'image_921.png', 915: 'image_922.png', 916: 'image_923.png', 917: 'image_924.png', 918: 'image_925.png', 919: 'image_926.png', 920: 'image_927.png', 921: 'image_928.png', 922: 'image_929.png', 923: 'image_93.png', 924: 'image_930.png', 925: 'image_931.png', 926: 'image_932.png', 927: 'image_933.png', 928: 'image_934.png', 929: 'image_935.png', 930: 'image_936.png', 931: 'image_937.png', 932: 'image_938.png', 933: 'image_939.png', 934: 'image_94.png', 935: 'image_940.png', 936: 'image_941.png', 937: 'image_942.png', 938: 'image_943.png', 939: 'image_944.png', 940: 'image_945.png', 941: 'image_946.png', 942: 'image_947.png', 943: 'image_948.png', 944: 'image_949.png', 945: 'image_95.png', 946: 'image_950.png', 947: 'image_951.png', 948: 'image_952.png', 949: 'image_953.png', 950: 'image_954.png', 951: 'image_955.png', 952: 'image_956.png', 953: 'image_957.png', 954: 'image_958.png', 955: 'image_959.png', 956: 'image_96.png', 957: 'image_960.png', 958: 'image_961.png', 959: 'image_962.png', 960: 'image_963.png', 961: 'image_964.png', 962: 'image_965.png', 963: 'image_966.png', 964: 'image_967.png', 965: 'image_968.png', 966: 'image_969.png', 967: 'image_97.png', 968: 'image_970.png', 969: 'image_971.png', 970: 'image_972.png', 971: 'image_973.png', 972: 'image_974.png', 973: 'image_975.png', 974: 'image_976.png', 975: 'image_977.png', 976: 'image_978.png', 977: 'image_979.png', 978: 'image_98.png', 979: 'image_980.png', 980: 'image_981.png', 981: 'image_982.png', 982: 'image_983.png', 983: 'image_984.png', 984: 'image_985.png', 985: 'image_986.png', 986: 'image_987.png', 987: 'image_988.png', 988: 'image_989.png', 989: 'image_99.png', 990: 'image_990.png', 991: 'image_991.png', 992: 'image_992.png', 993: 'image_993.png', 994: 'image_994.png', 995: 'image_995.png', 996: 'image_996.png', 997: 'image_997.png', 998: 'image_998.png', 999: 'image_999.png'}\n"]}]},{"cell_type":"code","source":["# import random\n","\n","# # Preconvert dictionary to a list for faster indexing\n","# base_commands_list = list(base_commands_dict.values())\n","\n","# def get_random_command_fast(base_commands_list, objects):\n","#     \"\"\"\n","#     Efficiently selects a random command and replaces the {object}\n","#     placeholder with a randomly chosen object.\n","#     \"\"\"\n","#     # Randomly choose a command and an object\n","#     command_template = random.choice(base_commands_list)\n","#     chosen_object = random.choice(objects)\n","\n","#     # Format the command with the chosen object\n","#     return command_template.format(object=chosen_object)\n","\n","# # Example usage\n","# command = get_random_command_fast(base_commands_list, objects)\n","# print(command)\n"],"metadata":{"id":"F8USNDFxRh3c","executionInfo":{"status":"ok","timestamp":1733662238026,"user_tz":300,"elapsed":240,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["import random\n","import json\n","\n","def generate_precomputed_commands(base_commands_list, objects, num_commands=1000):\n","    \"\"\"\n","    Precompute all possible command-object pairs and then sample randomly.\n","    \"\"\"\n","    # Precompute all possible (command, object) pairs\n","    precomputed_pairs = [(command.format(object=obj), obj) for command in base_commands_list for obj in objects]\n","\n","    # Randomly sample `num_commands` pairs\n","    sampled_pairs = random.choices(precomputed_pairs, k=num_commands)\n","\n","    # Convert sampled pairs to dictionaries for saving\n","    return [{\"command\": cmd, \"object\": obj} for cmd, obj in sampled_pairs]\n","\n","def save_to_json(data, file_path):\n","    \"\"\"Save the data to a JSON file.\"\"\"\n","    with open(file_path, 'w') as f:\n","        json.dump(data, f)\n","\n","# Example usage\n","base_commands_list = list(base_commands_dict.values())\n","objects = [\"dog\", \"cow\", \"pineapple\", \"cat\", \"beach ball\"]\n","\n","# Generate 1,000 random commands with objects\n","random_commands_with_objects = generate_precomputed_commands(base_commands_list, objects, num_commands=1000)\n","\n","# Optionally save the commands to a file\n","save_to_json(random_commands_with_objects, \"random_commands_with_objects.json\")\n","\n","# Print the first 10 commands to verify\n","print(random_commands_with_objects[:10])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Jo1MYYeMREZp","executionInfo":{"status":"ok","timestamp":1733663158461,"user_tz":300,"elapsed":221,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"cb3fd2d9-00cf-4844-f969-15335b581d97"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'command': 'Move in the direction of the pineapple', 'object': 'pineapple'}, {'command': \"Progress toward the dog's vicinity\", 'object': 'dog'}, {'command': 'Advance to the pineapple', 'object': 'pineapple'}, {'command': 'Position yourself near the cat', 'object': 'cat'}, {'command': 'Move within proximity of the pineapple', 'object': 'pineapple'}, {'command': 'Make your way to the dog', 'object': 'dog'}, {'command': 'Navigate to the pineapple', 'object': 'pineapple'}, {'command': 'Direct yourself toward the dog', 'object': 'dog'}, {'command': 'Engage approach to the pineapple', 'object': 'pineapple'}, {'command': 'Walk up to the pineapple', 'object': 'pineapple'}]\n"]}]},{"cell_type":"code","source":["%cd .."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-H4Q1ksaW2gY","executionInfo":{"status":"ok","timestamp":1733662842125,"user_tz":300,"elapsed":257,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"3529ca94-edb6-494c-eaf0-a59391181bfd"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/Dataset\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iwfrU75jYKc2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Full data save, so get the list of commands and the list of x,y coordinates"],"metadata":{"id":"JvY0IVHnYK_n"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Read the CSV file\n","df = pd.read_csv('object_positions_0.csv')\n","\n","# Display the first few rows\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OGyk6QmxWeir","executionInfo":{"status":"ok","timestamp":1733663520295,"user_tz":300,"elapsed":363,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"c907cacc-dd36-4c85-9fb5-4c5f3e6ca3b2"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["   iteration    object_name         x         y\n","0          0        dog.obj  3.662025  1.099856\n","1          0       ball.obj -2.646685 -3.080774\n","2          0        cow.obj -2.223347  4.152951\n","3          0  pineapple.obj -0.914512  4.302351\n","4          0        cat.obj  2.323823 -2.899207\n"]}]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"0GzW4vLWWegZ","executionInfo":{"status":"ok","timestamp":1733663521076,"user_tz":300,"elapsed":5,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"ebd18ec3-e80e-459a-8327-c73307d51518"},"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      iteration    object_name         x         y\n","0             0        dog.obj  3.662025  1.099856\n","1             0       ball.obj -2.646685 -3.080774\n","2             0        cow.obj -2.223347  4.152951\n","3             0  pineapple.obj -0.914512  4.302351\n","4             0        cat.obj  2.323823 -2.899207\n","...         ...            ...       ...       ...\n","4995        999        dog.obj -2.910478 -1.165165\n","4996        999       ball.obj  1.772687 -3.339614\n","4997        999        cow.obj  3.039332  1.048780\n","4998        999  pineapple.obj  1.002327  3.179597\n","4999        999        cat.obj -3.096321  2.167458\n","\n","[5000 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-fa4cf454-8de4-4ddb-8667-4a6e788f50ec\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>iteration</th>\n","      <th>object_name</th>\n","      <th>x</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>dog.obj</td>\n","      <td>3.662025</td>\n","      <td>1.099856</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>ball.obj</td>\n","      <td>-2.646685</td>\n","      <td>-3.080774</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>cow.obj</td>\n","      <td>-2.223347</td>\n","      <td>4.152951</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>pineapple.obj</td>\n","      <td>-0.914512</td>\n","      <td>4.302351</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>cat.obj</td>\n","      <td>2.323823</td>\n","      <td>-2.899207</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4995</th>\n","      <td>999</td>\n","      <td>dog.obj</td>\n","      <td>-2.910478</td>\n","      <td>-1.165165</td>\n","    </tr>\n","    <tr>\n","      <th>4996</th>\n","      <td>999</td>\n","      <td>ball.obj</td>\n","      <td>1.772687</td>\n","      <td>-3.339614</td>\n","    </tr>\n","    <tr>\n","      <th>4997</th>\n","      <td>999</td>\n","      <td>cow.obj</td>\n","      <td>3.039332</td>\n","      <td>1.048780</td>\n","    </tr>\n","    <tr>\n","      <th>4998</th>\n","      <td>999</td>\n","      <td>pineapple.obj</td>\n","      <td>1.002327</td>\n","      <td>3.179597</td>\n","    </tr>\n","    <tr>\n","      <th>4999</th>\n","      <td>999</td>\n","      <td>cat.obj</td>\n","      <td>-3.096321</td>\n","      <td>2.167458</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5000 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fa4cf454-8de4-4ddb-8667-4a6e788f50ec')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fa4cf454-8de4-4ddb-8667-4a6e788f50ec button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fa4cf454-8de4-4ddb-8667-4a6e788f50ec');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-53aed114-31e8-456e-8ba7-e60a7a44563c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53aed114-31e8-456e-8ba7-e60a7a44563c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-53aed114-31e8-456e-8ba7-e60a7a44563c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f06ce331-a7d0-4e64-ba4c-88e5bf76bcd2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f06ce331-a7d0-4e64-ba4c-88e5bf76bcd2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"iteration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 0,\n        \"max\": 999,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          521,\n          737,\n          740\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"object_name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ball.obj\",\n          \"cat.obj\",\n          \"cow.obj\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.855570633555216,\n        \"min\": -4.986299921609337,\n        \"max\": 4.99638162935914,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          3.838178827969378,\n          1.0915901319858443,\n          3.151339223323626\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.868971679140784,\n        \"min\": -4.965104792633281,\n        \"max\": 4.99081657974416,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          0.6923959551735652,\n          -4.276653737206013,\n          -1.8385368054744384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["import random\n","import json\n","import csv\n","\n","def generate_precomputed_commands(base_commands_list, objects, num_commands=1000):\n","    \"\"\"\n","    Precompute all possible command-object pairs and then sample randomly.\n","    \"\"\"\n","    # Precompute all possible (command, object) pairs\n","    precomputed_pairs = [(command.format(object=obj), obj) for command in base_commands_list for obj in objects]\n","\n","    # Randomly sample num_commands pairs\n","    sampled_pairs = random.choices(precomputed_pairs, k=num_commands)\n","\n","    # Convert sampled pairs to dictionaries for saving\n","    return [{\"command\": cmd, \"object\": obj} for cmd, obj in sampled_pairs]\n","\n","def save_to_json(data, file_path):\n","    \"\"\"Save the data to a JSON file.\"\"\"\n","    with open(file_path, 'w') as f:\n","        json.dump(data, f)\n","\n","def read_coordinates_from_csv(csv_file):\n","    \"\"\"\n","    Read coordinates from the CSV and return a dictionary mapping each iteration\n","    to a list of (object_name, x, y) tuples.\n","    \"\"\"\n","    coordinates = {}\n","    with open(csv_file, mode='r') as file:\n","        reader = csv.DictReader(file)\n","        for row in reader:\n","            iteration = int(row['iteration'])\n","            if iteration not in coordinates:\n","                coordinates[iteration] = []\n","            # Add object name and coordinates as a tuple\n","            coordinates[iteration].append((row['object_name'], float(row['x']), float(row['y'])))\n","    return coordinates\n","\n","def match_commands_to_coordinates(commands, coordinates):\n","    \"\"\"\n","    Match commands to their corresponding (x, y) coordinates based on the object.\n","    \"\"\"\n","    matched_data = []\n","    for i, command_obj in enumerate(commands):\n","        iteration = i % len(coordinates)  # Ensure we loop over available iterations\n","        object_name = command_obj[\"object\"] + \".obj\"  # Add '.obj' to match CSV format\n","        # Find the matching (object_name, x, y) tuple\n","        obj_coords = next(\n","            (coords for obj, *coords in coordinates[iteration] if obj == object_name),\n","            None\n","        )\n","        if obj_coords:\n","            matched_data.append({\n","                \"command\": command_obj[\"command\"],\n","                \"object\": command_obj[\"object\"],\n","                \"coordinates\": obj_coords\n","            })\n","    return matched_data\n","\n","# Example usage\n","base_commands_list = list(base_commands_dict.values())\n","objects = [\"dog\", \"cow\", \"pineapple\", \"cat\", \"ball\"]\n","\n","# Generate 1,000 random commands with objects\n","random_commands_with_objects = generate_precomputed_commands(base_commands_list, objects, num_commands=1000)\n","\n","# Read the coordinates from the CSV file\n","coordinates = read_coordinates_from_csv(\"object_positions_0.csv\")\n","\n","# Match commands to their coordinates\n","matched_data = match_commands_to_coordinates(random_commands_with_objects, coordinates)\n","\n","# Save the matched data to a JSON file\n","save_to_json(matched_data, \"matched_commands_with_coordinates.json\")\n","\n","# Print the first 10 matched entries to verify\n","print(matched_data[:10])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R2bPX66LWed6","executionInfo":{"status":"ok","timestamp":1733663529275,"user_tz":300,"elapsed":242,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"be9c227a-e338-49dd-e9a9-2dfd16f5e7d2"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'command': 'Align your position with the ball', 'object': 'ball', 'coordinates': [-2.6466847640000166, -3.080774173041642]}, {'command': 'Head over to the pineapple', 'object': 'pineapple', 'coordinates': [0.22359653414407135, 3.0434139397008932]}, {'command': 'Engage approach to the pineapple', 'object': 'pineapple', 'coordinates': [2.6635651783347916, 3.821070070866861]}, {'command': 'Position yourself near the dog', 'object': 'dog', 'coordinates': [3.6151766770659535, 0.6442977068024611]}, {'command': 'Zero in on the cat', 'object': 'cat', 'coordinates': [-2.227381563098965, -2.69458077771492]}, {'command': 'Proceed toward the ball', 'object': 'ball', 'coordinates': [-3.902796185283897, -2.7417301162752863]}, {'command': \"Travel to the cat's position\", 'object': 'cat', 'coordinates': [2.1559285563029342, 2.4148492686764342]}, {'command': 'Make your way to the cow', 'object': 'cow', 'coordinates': [-4.613935183104117, 0.42781335909281437]}, {'command': \"Reach the ball's location\", 'object': 'ball', 'coordinates': [-2.165470565450776, -2.405641651238017]}, {'command': 'Engage approach to the pineapple', 'object': 'pineapple', 'coordinates': [1.3727135271030235, -4.459443784829403]}]\n"]}]},{"cell_type":"code","source":["# import csv\n","\n","# def replace_object_names_in_csv(input_file, output_file):\n","#     \"\"\"\n","#     Replace 'beach_ball.obj' with 'ball.obj' in the 'object_name' column of a CSV.\n","#     \"\"\"\n","#     with open(input_file, mode='r') as infile, open(output_file, mode='w', newline='') as outfile:\n","#         reader = csv.DictReader(infile)\n","#         fieldnames = reader.fieldnames\n","#         writer = csv.DictWriter(outfile, fieldnames=fieldnames)\n","\n","#         # Write the header row\n","#         writer.writeheader()\n","\n","#         for row in reader:\n","#             # Replace the object_name if it matches 'beach_ball.obj'\n","#             if row['object_name'] == 'beach_ball.obj':\n","#                 row['object_name'] = 'ball.obj'\n","#             writer.writerow(row)\n","\n","# # Example usage\n","# replace_object_names_in_csv(\"object_positions_0_old.csv\", \"object_positions_0.csv\")\n"],"metadata":{"id":"j56lVN5CWebn","executionInfo":{"status":"ok","timestamp":1733663510771,"user_tz":300,"elapsed":250,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["matched_data[:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YrVV8zP9WeWp","executionInfo":{"status":"ok","timestamp":1733663909429,"user_tz":300,"elapsed":241,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"69096a07-96ab-4f08-8d5e-3d9a2222b60d"},"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[{'command': 'Align your position with the ball',\n","  'object': 'ball',\n","  'coordinates': [-2.6466847640000166, -3.080774173041642]},\n"," {'command': 'Head over to the pineapple',\n","  'object': 'pineapple',\n","  'coordinates': [0.22359653414407135, 3.0434139397008932]}]"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["# Assuming matched_data is already created\n","texts = [entry['command'] for entry in matched_data]\n","labels_xy = [entry['coordinates'] for entry in matched_data]\n","\n","# Example output\n","print(\"Texts:\", texts[:5])  # Print the first 5 texts to verify\n","print(\"Labels (x, y):\", labels_xy[:5])  # Print the first 5 coordinates to verify\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"93zJla0MZ5FG","executionInfo":{"status":"ok","timestamp":1733663627618,"user_tz":300,"elapsed":336,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"be415a5a-51ed-40e6-8948-5ca4046a6ad8"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Texts: ['Align your position with the ball', 'Head over to the pineapple', 'Engage approach to the pineapple', 'Position yourself near the dog', 'Zero in on the cat']\n","Labels (x, y): [[-2.6466847640000166, -3.080774173041642], [0.22359653414407135, 3.0434139397008932], [2.6635651783347916, 3.821070070866861], [3.6151766770659535, 0.6442977068024611], [-2.227381563098965, -2.69458077771492]]\n"]}]},{"cell_type":"code","source":["image_paths = [\n","    f\"image_{i}.png\"\n","    for i in range(len(texts))\n","]\n","print(image_paths[:5])\n","print(len(image_paths))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gAEUb5sEa_iB","executionInfo":{"status":"ok","timestamp":1733663989818,"user_tz":300,"elapsed":284,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"c4ea951e-131b-4bf2-dc8d-e775d65c2824"},"execution_count":81,"outputs":[{"output_type":"stream","name":"stdout","text":["['image_0.png', 'image_1.png', 'image_2.png', 'image_3.png', 'image_4.png']\n","1000\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"iMXaxkz6REVf","executionInfo":{"status":"ok","timestamp":1733664368345,"user_tz":300,"elapsed":242,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"49013732-dd67-45ae-c23a-32d401660d31"},"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/Dataset/images_0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["%cd ../../rlds_dataset_builder/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A3zhHJpnc2Cq","executionInfo":{"status":"ok","timestamp":1733664438861,"user_tz":300,"elapsed":254,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"fcbbca45-24a8-471f-b070-1935cdb6145f"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"u-km0QwidS0V","executionInfo":{"status":"ok","timestamp":1733664522700,"user_tz":300,"elapsed":334,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"c2a55b5a-22f6-4835-ae96-d1b2bee36901"},"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["image_directory + image_paths[i]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"-1VxDHTvdaqv","executionInfo":{"status":"ok","timestamp":1733664551009,"user_tz":300,"elapsed":230,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"28c47262-7970-4f7f-d5da-e178695b52fa"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/Dataset/images_0image_0.png'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["%cd ../rlds_dataset_builder"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fuBpgnQ3y_A2","executionInfo":{"status":"ok","timestamp":1733670231688,"user_tz":300,"elapsed":231,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"9bf6a937-069e-445f-89b5-b4752c615e5a"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder\n"]}]},{"cell_type":"code","source":["# create_example_data.py\n","import numpy as np\n","import os\n","import tqdm\n","from PIL import Image\n","\n","N_EXAMPLES = 1000\n","os.makedirs('data/train', exist_ok=True)\n","\n","image_directory = \"../Dataset/images_0/\"\n","\n","# Example placeholders: replace these with your actual data.\n","# image_paths = ['path_to_image_0.jpg', 'path_to_image_1.jpg', ...]\n","# texts = ['some text for 0', 'some text for 1', ...]\n","# labels_xy = [(x0, y0), (x1, y1), ...] # each an (x,y) pair.\n","\n","# Make sure lengths match: len(image_paths) == len(texts) == len(labels_xy) == N_EXAMPLES\n","\n","for i in tqdm.tqdm(range(N_EXAMPLES)):\n","    # Load and convert image to the correct shape and dtype\n","    # We assume the image is already 1280(width) x 960(height) RGB.\n","    # If not, you may need to resize or rotate the image accordingly.\n","\n","    # Correctly construct the image path\n","    img_path = os.path.join(image_directory, image_paths[i])\n","\n","    img = Image.open(image_directory + image_paths[i]).convert('RGB')\n","    # Ensure shape [960, 1280, 3]\n","    img = np.asarray(img, dtype=np.uint8)\n","\n","\n","\n","\n","    # Append 5 dimensions of zeros to the existing (x, y) values\n","    label_with_zeros = np.append(labels_xy[i], [0, 0, 0, 0, 0]).astype(np.float32)\n","\n","    # Create a single-step episode\n","    episode = [{\n","        'image': img,\n","        'text': texts[i],\n","        # Updated label creation\n","        'label': label_with_zeros,\n","    }]\n","\n","    # Save as a .npy file\n","    np.save(f'data/train/episode_{i}.npy', episode)\n","\n","print(\"Successfully created the dataset!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FNubyTlrRENz","executionInfo":{"status":"ok","timestamp":1733670301688,"user_tz":300,"elapsed":58334,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"2fb91d53-dd80-49f9-ea13-f215bae7fc6b"},"execution_count":144,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 1000/1000 [00:58<00:00, 17.17it/s]"]},{"output_type":"stream","name":"stdout","text":["Successfully created the dataset!\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["# example_dataset_dataset_builder.py\n","from typing import Iterator, Tuple, Any\n","import glob\n","import numpy as np\n","import tensorflow as tf\n","import tensorflow_datasets as tfds\n","\n","class CustomDataset(tfds.core.GeneratorBasedBuilder):\n","    \"\"\"DatasetBuilder for single-step episodes with image, text, and (x,y) label.\"\"\"\n","\n","    VERSION = tfds.core.Version('1.0.0')\n","    RELEASE_NOTES = {\n","        '1.0.0': 'Initial release.'\n","    }\n","\n","    def _info(self) -> tfds.core.DatasetInfo:\n","        return self.dataset_info_from_configs(\n","            features=tfds.features.FeaturesDict({\n","                'steps': tfds.features.Dataset({\n","                    'observation': tfds.features.FeaturesDict({\n","                        'image': tfds.features.Image(\n","                            shape=(960, 1280, 3),\n","                            dtype=np.uint8,\n","                            encoding_format='png',\n","                            doc='Main camera RGB observation (960x1280x3).'\n","                        ),\n","                        'text': tfds.features.Text(\n","                            doc='Text instruction or caption.'\n","                        ),\n","                        'label': tfds.features.Tensor(\n","                            shape=(2,),\n","                            dtype=np.float32,\n","                            doc='(x,y) coordinates label.'\n","                        ),\n","                    }),\n","                    'discount': tfds.features.Scalar(\n","                        dtype=np.float32,\n","                        doc='Discount factor, set to 1.0 since no RL sequence.'\n","                    ),\n","                    'reward': tfds.features.Scalar(\n","                        dtype=np.float32,\n","                        doc='Reward, set to 0.0 for non-RL data.'\n","                    ),\n","                    'is_first': tfds.features.Scalar(\n","                        dtype=np.bool_,\n","                        doc='True since only one step per episode.'\n","                    ),\n","                    'is_last': tfds.features.Scalar(\n","                        dtype=np.bool_,\n","                        doc='True since only one step per episode.'\n","                    ),\n","                    'is_terminal': tfds.features.Scalar(\n","                        dtype=np.bool_,\n","                        doc='True since only one step per episode.'\n","                    ),\n","                }),\n","                'episode_metadata': tfds.features.FeaturesDict({\n","                    'file_path': tfds.features.Text(\n","                        doc='Path to the original data file.'\n","                    )\n","                }),\n","            })\n","        )\n","\n","    def _split_generators(self, dl_manager: tfds.download.DownloadManager):\n","        # If you have separate val/test splits, you can also add them here.\n","        return {\n","            'train': self._generate_examples(path='data/train/episode_*.npy'),\n","            # 'val': self._generate_examples(path='data/val/episode_*.npy'),\n","        }\n","\n","    def _generate_examples(self, path) -> Iterator[Tuple[str, Any]]:\n","        episode_paths = glob.glob(path)\n","\n","        for episode_path in episode_paths:\n","            data = np.load(episode_path, allow_pickle=True)\n","            # data is a single-step episode: a list with one dict: {'image', 'text', 'label'}\n","\n","            step = data[0]\n","            episode = [{\n","                'observation': {\n","                    'image': step['image'],\n","                    'text': step['text'],\n","                    'label': step['label'],\n","                },\n","                'discount': 1.0,\n","                'reward': 0.0,\n","                'is_first': True,\n","                'is_last': True,\n","                'is_terminal': True,\n","            }]\n","\n","            sample = {\n","                'steps': episode,\n","                'episode_metadata': {\n","                    'file_path': episode_path\n","                }\n","            }\n","\n","            yield episode_path, sample\n"],"metadata":{"id":"Wwz6dSKJdFG1","executionInfo":{"status":"ok","timestamp":1733670589373,"user_tz":300,"elapsed":330,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":159,"outputs":[]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"ss7atBxAs6pH","executionInfo":{"status":"ok","timestamp":1733670437356,"user_tz":300,"elapsed":220,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"bd56535a-8b14-4daf-9c3c-59b0c3efa413"},"execution_count":150,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":150}]},{"cell_type":"code","source":["from custom_dataset.custom_dataset_dataset_builder import CustomDataset\n","import tensorflow_datasets as tfds\n","\n","builder = CustomDataset()\n","builder.download_and_prepare()  # This step generates TFRecords"],"metadata":{"id":"7NZWM6j0s2Lb","executionInfo":{"status":"ok","timestamp":1733670567744,"user_tz":300,"elapsed":230,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}}},"execution_count":156,"outputs":[]},{"cell_type":"code","source":["import os\n","\n","tfds_dir = os.path.expanduser('~/tensorflow_datasets/custom_dataset/1.0.0/')\n","print(\"Contents of the TFDS directory:\")\n","print(os.listdir(tfds_dir))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z3wfLV1XuR74","executionInfo":{"status":"ok","timestamp":1733670568770,"user_tz":300,"elapsed":3,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"a53e895b-3d3d-404f-94d3-cff17040ca30"},"execution_count":157,"outputs":[{"output_type":"stream","name":"stdout","text":["Contents of the TFDS directory:\n","['features.json', 'dataset_info.json', 'custom_dataset-train.tfrecord-00000-of-00001']\n"]}]},{"cell_type":"code","source":["ds = builder.as_dataset(split='train', as_supervised=False)\n","\n","for sample in ds.take(1):\n","    print(sample)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W8MVfug6ubTy","executionInfo":{"status":"ok","timestamp":1733670570427,"user_tz":300,"elapsed":341,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"9b386852-b5d6-4e92-e07e-10cc89bdc050"},"execution_count":158,"outputs":[{"output_type":"stream","name":"stdout","text":["{'episode_metadata': {'file_path': <tf.Tensor: shape=(), dtype=string, numpy=b'data/train/episode_734.npy'>}, 'steps': <_VariantDataset element_spec={'discount': TensorSpec(shape=(), dtype=tf.float32, name=None), 'is_first': TensorSpec(shape=(), dtype=tf.bool, name=None), 'is_last': TensorSpec(shape=(), dtype=tf.bool, name=None), 'is_terminal': TensorSpec(shape=(), dtype=tf.bool, name=None), 'observation': {'image': TensorSpec(shape=(960, 1280, 3), dtype=tf.uint8, name=None), 'label': TensorSpec(shape=(2,), dtype=tf.float32, name=None), 'text': TensorSpec(shape=(), dtype=tf.string, name=None)}, 'reward': TensorSpec(shape=(), dtype=tf.float32, name=None)}>}\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"4Z2RVUo3ucVf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!tfds build --datasets=custom_dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"976csRNmkWXL","executionInfo":{"status":"ok","timestamp":1733670608620,"user_tz":300,"elapsed":5285,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"e86e5266-4f18-4c03-e96f-ce5ae68a8bc7"},"execution_count":160,"outputs":[{"output_type":"stream","name":"stdout","text":["2024-12-08 15:10:04.124180: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-12-08 15:10:04.152850: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-12-08 15:10:04.164659: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-12-08 15:10:05.451326: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","INFO[build.py]: Loading dataset custom_dataset from path: /content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder/custom_dataset/custom_dataset_dataset_builder.py\n","INFO[dataset_info.py]: Load dataset info from /root/tensorflow_datasets/custom_dataset/1.0.0\n","INFO[cli_utils.py]: download_and_prepare for dataset custom_dataset/1.0.0...\n","INFO[dataset_builder.py]: Reusing dataset custom_dataset (/root/tensorflow_datasets/custom_dataset/1.0.0)\n","INFO[cli_utils.py]: Dataset generation complete...\n","\n","tfds.core.DatasetInfo(\n","    name='custom_dataset',\n","    full_name='custom_dataset/1.0.0',\n","    description=\"\"\"\n","    \n","    \"\"\",\n","    homepage='https://www.tensorflow.org/datasets/catalog/custom_dataset',\n","    data_dir='/root/tensorflow_datasets/custom_dataset/1.0.0',\n","    file_format=tfrecord,\n","    download_size=Unknown size,\n","    dataset_size=26.63 MiB,\n","    features=FeaturesDict({\n","        'episode_metadata': FeaturesDict({\n","            'file_path': Text(shape=(), dtype=string),\n","        }),\n","        'steps': Dataset({\n","            'discount': Scalar(shape=(), dtype=float32, description=Discount factor, set to 1.0 since no RL sequence.),\n","            'is_first': Scalar(shape=(), dtype=bool, description=True since only one step per episode.),\n","            'is_last': Scalar(shape=(), dtype=bool, description=True since only one step per episode.),\n","            'is_terminal': Scalar(shape=(), dtype=bool, description=True since only one step per episode.),\n","            'observation': FeaturesDict({\n","                'image': Image(shape=(960, 1280, 3), dtype=uint8, description=Main camera RGB observation (960x1280x3).),\n","                'label': Tensor(shape=(2,), dtype=float32, description=(x,y) coordinates label.),\n","                'text': Text(shape=(), dtype=string),\n","            }),\n","            'reward': Scalar(shape=(), dtype=float32, description=Reward, set to 0.0 for non-RL data.),\n","        }),\n","    }),\n","    supervised_keys=None,\n","    disable_shuffling=False,\n","    splits={\n","        'train': <SplitInfo num_examples=1000, num_shards=1>,\n","    },\n","    citation=\"\"\"\"\"\",\n",")\n","\n"]}]},{"cell_type":"markdown","source":["# OpenVLA Training?"],"metadata":{"id":"juULOXBGjo5u"}},{"cell_type":"code","source":["# !git clone https://github.com/openvla/openvla.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"et2eQ2TPjnyP","executionInfo":{"status":"ok","timestamp":1733666243730,"user_tz":300,"elapsed":3463,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"53228fac-3ad2-436f-864a-d446ae4bab8a"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'openvla'...\n","remote: Enumerating objects: 480, done.\u001b[K\n","remote: Counting objects: 100% (315/315), done.\u001b[K\n","remote: Compressing objects: 100% (170/170), done.\u001b[K\n","remote: Total 480 (delta 179), reused 153 (delta 143), pack-reused 165 (from 1)\u001b[K\n","Receiving objects: 100% (480/480), 249.39 KiB | 1.88 MiB/s, done.\n","Resolving deltas: 100% (243/243), done.\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"0jaXjk3toK-X","executionInfo":{"status":"ok","timestamp":1733684899517,"user_tz":300,"elapsed":228,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"a7f211c6-a1c4-4b6e-ec13-626834729f5a"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/rlds_dataset_builder'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["%cd ../openvla"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27VT4dXHjnv8","executionInfo":{"status":"ok","timestamp":1733684901558,"user_tz":300,"elapsed":282,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"0fe45087-5b42-4b39-d4e7-af65f95f742c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla\n"]}]},{"cell_type":"code","source":["from custom_dataset_dataset_builder import CustomDataset\n","import tensorflow_datasets as tfds\n","\n","builder = CustomDataset()\n","builder.download_and_prepare()  # This step generates TFRecords\n","\n","import os\n","\n","tfds_dir = os.path.expanduser('~/tensorflow_datasets/custom_dataset/1.0.0/')\n","print(\"Contents of the TFDS directory:\")\n","print(os.listdir(tfds_dir))\n","\n","ds = builder.as_dataset(split='train', as_supervised=False)\n","\n","for sample in ds.take(1):\n","    print(sample)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hDavWTQcjnt6","executionInfo":{"status":"ok","timestamp":1733682772118,"user_tz":300,"elapsed":272,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"30b4e4d9-205c-4485-d047-14b794c9ac81"},"execution_count":176,"outputs":[{"output_type":"stream","name":"stdout","text":["Contents of the TFDS directory:\n","['features.json', 'dataset_info.json', 'custom_dataset-train.tfrecord-00000-of-00001']\n","{'episode_metadata': {'file_path': <tf.Tensor: shape=(), dtype=string, numpy=b'data/train/episode_734.npy'>}, 'steps': <_VariantDataset element_spec={'discount': TensorSpec(shape=(), dtype=tf.float32, name=None), 'is_first': TensorSpec(shape=(), dtype=tf.bool, name=None), 'is_last': TensorSpec(shape=(), dtype=tf.bool, name=None), 'is_terminal': TensorSpec(shape=(), dtype=tf.bool, name=None), 'observation': {'image': TensorSpec(shape=(960, 1280, 3), dtype=tf.uint8, name=None), 'label': TensorSpec(shape=(2,), dtype=tf.float32, name=None), 'text': TensorSpec(shape=(), dtype=tf.string, name=None)}, 'reward': TensorSpec(shape=(), dtype=tf.float32, name=None)}>}\n"]}]},{"cell_type":"code","source":["# !torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py \\\n","#   --vla_path \"openvla/openvla-7b\" \\\n","#   --data_root_dir <PATH TO BASE DATASETS DIR> \\\n","#   --dataset_name bridge_orig \\\n","#   --run_root_dir <PATH TO LOG/CHECKPOINT DIR> \\\n","#   --adapter_tmp_dir <PATH TO TEMPORARY DIR TO SAVE ADAPTER WEIGHTS> \\\n","#   --lora_rank 32 \\\n","#   --batch_size 16 \\\n","#   --grad_accumulation_steps 1 \\\n","#   --learning_rate 5e-4 \\\n","#   --image_aug <True or False> \\\n","#   --wandb_project <PROJECT> \\\n","#   --wandb_entity <ENTITY> \\\n","#   --save_steps <NUMBER OF GRADIENT STEPS PER CHECKPOINT SAVE>"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nlY91zWWsyWn","executionInfo":{"status":"ok","timestamp":1733681306790,"user_tz":300,"elapsed":292,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"58c2f2a8-70f8-4849-d43d-c5d8f8faae41"},"execution_count":163,"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: -c: line 1: syntax error near unexpected token `newline'\n","/bin/bash: -c: line 1: `torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py    --vla_path \"openvla/openvla-7b\"    --data_root_dir <PATH TO BASE DATASETS DIR>    --dataset_name bridge_orig    --run_root_dir <PATH TO LOG/CHECKPOINT DIR>    --adapter_tmp_dir <PATH TO TEMPORARY DIR TO SAVE ADAPTER WEIGHTS>    --lora_rank 32    --batch_size 16    --grad_accumulation_steps 1    --learning_rate 5e-4    --image_aug <True or False>    --wandb_project <PROJECT>    --wandb_entity <ENTITY>    --save_steps <NUMBER OF GRADIENT STEPS PER CHECKPOINT SAVE>'\n"]}]},{"cell_type":"code","source":["%pwd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"Fa7N5rSppMJi","executionInfo":{"status":"ok","timestamp":1733684418108,"user_tz":300,"elapsed":303,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"f241694f-4118-4bac-e68c-39eb848cad4b"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tcqJSpZjqbo4","executionInfo":{"status":"ok","timestamp":1733684781872,"user_tz":300,"elapsed":221,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"7991a348-f6ec-4396-8590-dbe226c932dc"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla\n"]}]},{"cell_type":"code","source":["%ls"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gff0yAiDqqPF","executionInfo":{"status":"ok","timestamp":1733684803485,"user_tz":300,"elapsed":236,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"2df2492c-20d4-4fdc-d67c-5c4628d4d8a4"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["'Copy of RLDS_Custom'                Makefile            pyproject.toml         \u001b[0m\u001b[01;34mvla-scripts\u001b[0m/\n"," custom_dataset_dataset_builder.py   \u001b[01;34mopenvla.egg-info\u001b[0m/   README.md\n"," \u001b[01;34mexperiments\u001b[0m/                        \u001b[01;34mprismatic\u001b[0m/          requirements-min.txt\n"," LICENSE                             \u001b[01;34m__pycache__\u001b[0m/        \u001b[01;34mscripts\u001b[0m/\n"]}]},{"cell_type":"code","source":["# !pip install -e .\n","!pip install -r requirements-min.txt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oCwfxHuAogoY","executionInfo":{"status":"ok","timestamp":1733684862289,"user_tz":300,"elapsed":2428,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"1a3bb923-4479-47fc-9721-f8b1bb79b1cb"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: timm==0.9.10 in /usr/local/lib/python3.10/dist-packages (from -r requirements-min.txt (line 1)) (0.9.10)\n","Requirement already satisfied: tokenizers==0.19.1 in /usr/local/lib/python3.10/dist-packages (from -r requirements-min.txt (line 2)) (0.19.1)\n","Requirement already satisfied: torch>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from -r requirements-min.txt (line 3)) (2.2.0)\n","Requirement already satisfied: torchvision>=0.16.0 in /usr/local/lib/python3.10/dist-packages (from -r requirements-min.txt (line 4)) (0.17.0)\n","Requirement already satisfied: transformers==4.40.1 in /usr/local/lib/python3.10/dist-packages (from -r requirements-min.txt (line 5)) (4.40.1)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from timm==0.9.10->-r requirements-min.txt (line 1)) (6.0.2)\n","Requirement already satisfied: huggingface-hub in /usr/local/lib/python3.10/dist-packages (from timm==0.9.10->-r requirements-min.txt (line 1)) (0.26.3)\n","Requirement already satisfied: safetensors in /usr/local/lib/python3.10/dist-packages (from timm==0.9.10->-r requirements-min.txt (line 1)) (0.4.5)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (3.16.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (24.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (2024.9.11)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (2.32.3)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers==4.40.1->-r requirements-min.txt (line 5)) (4.66.6)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (1.13.1)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (3.4.2)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (3.1.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (2024.10.0)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.105)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.105)\n","Requirement already satisfied: nvidia-cudnn-cu12==8.9.2.26 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (8.9.2.26)\n","Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.3.1)\n","Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (11.0.2.54)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (10.3.2.106)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (11.4.5.107)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.0.106)\n","Requirement already satisfied: nvidia-nccl-cu12==2.19.3 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (2.19.3)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (12.1.105)\n","Requirement already satisfied: triton==2.2.0 in /usr/local/lib/python3.10/dist-packages (from torch>=2.2.0->-r requirements-min.txt (line 3)) (2.2.0)\n","Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.10/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch>=2.2.0->-r requirements-min.txt (line 3)) (12.6.85)\n","Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision>=0.16.0->-r requirements-min.txt (line 4)) (11.0.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=2.2.0->-r requirements-min.txt (line 3)) (3.0.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.40.1->-r requirements-min.txt (line 5)) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.40.1->-r requirements-min.txt (line 5)) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.40.1->-r requirements-min.txt (line 5)) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers==4.40.1->-r requirements-min.txt (line 5)) (2024.8.30)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=2.2.0->-r requirements-min.txt (line 3)) (1.3.0)\n"]}]},{"cell_type":"code","source":["# !torchrun --nproc_per_node=1 /content/drive/MyDrive/GT_Semester3/Deep\\ RL\\ \\(CS\\ 8803\\ DRL\\)/Project/openvla/vla-scripts/finetune.py\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LHy1uvoToHue","executionInfo":{"status":"ok","timestamp":1733684199941,"user_tz":300,"elapsed":9169,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"ee400f9a-35fd-45a5-d16f-5c76a6a892b7"},"execution_count":197,"outputs":[{"output_type":"stream","name":"stdout","text":["2024-12-08 18:56:35.147119: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-12-08 18:56:35.161868: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-12-08 18:56:35.165934: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-12-08 18:56:36.280932: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","Traceback (most recent call last):\n","  File \"/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla/vla-scripts/finetune.py\", line 42, in <module>\n","    from prismatic.models.backbones.llm.prompting import PurePromptBuilder, VicunaV15ChatPromptBuilder\n","ModuleNotFoundError: No module named 'prismatic'\n","E1208 18:56:39.463000 111489 torch/distributed/elastic/multiprocessing/api.py:869] failed (exitcode: 1) local_rank: 0 (pid: 111506) of binary: /usr/bin/python3\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/torchrun\", line 8, in <module>\n","    sys.exit(main())\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py\", line 355, in wrapper\n","    return f(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/run.py\", line 919, in main\n","    run(args)\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/run.py\", line 910, in run\n","    elastic_launch(\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py\", line 138, in __call__\n","    return launch_agent(self._config, self._entrypoint, list(args))\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py\", line 269, in launch_agent\n","    raise ChildFailedError(\n","torch.distributed.elastic.multiprocessing.errors.ChildFailedError: \n","============================================================\n","/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla/vla-scripts/finetune.py FAILED\n","------------------------------------------------------------\n","Failures:\n","  <NO_OTHER_FAILURES>\n","------------------------------------------------------------\n","Root Cause (first observed failure):\n","[0]:\n","  time      : 2024-12-08_18:56:39\n","  host      : 5cf0734d5c57\n","  rank      : 0 (local_rank: 0)\n","  exitcode  : 1 (pid: 111506)\n","  error_file: <N/A>\n","  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html\n","============================================================\n"]}]},{"cell_type":"code","source":["!torchrun --standalone --nnodes 1 --nproc-per-node 1 vla-scripts/finetune.py \\\n","  --vla_path \"openvla/openvla-7b\" \\\n","  --data_root_dir \"~/tensorflow_datasets/custom_dataset/1.0.0/\" \\\n","  --dataset_name \"custom_dataset\" \\\n","  --run_root_dir \"/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla/\" \\\n","  --adapter_tmp_dir \"/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/adapters\" \\\n","  --lora_rank 32 \\\n","  --batch_size 16 \\\n","  --grad_accumulation_steps 1 \\\n","  --learning_rate 5e-4 \\\n","  --image_aug False \\\n","  --wandb_project \"openvla_finetuning\" \\\n","  --wandb_entity \"myusername\" \\\n","  --save_steps 100\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_DJmSGcSdVph","executionInfo":{"status":"ok","timestamp":1733684949095,"user_tz":300,"elapsed":37545,"user":{"displayName":"Albert Dagon","userId":"14178471281992910814"}},"outputId":"eb78993e-3d1c-4078-9d27-d2bf6654e637"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["No CUDA runtime is found, using CUDA_HOME='/usr/local/cuda'\n","2024-12-08 19:08:36.441243: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","2024-12-08 19:08:36.441299: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","2024-12-08 19:08:36.442281: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","2024-12-08 19:08:37.553774: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n","/usr/local/lib/python3.10/dist-packages/accelerate/state.py:246: UserWarning: OMP_NUM_THREADS/MKL_NUM_THREADS unset, we set it at 4 to improve oob performance.\n","  warnings.warn(\n","Fine-tuning OpenVLA Model `openvla/openvla-7b` on `custom_dataset`\n","Traceback (most recent call last):\n","  File \"/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla/vla-scripts/finetune.py\", line 373, in <module>\n","    finetune()\n","  File \"/usr/local/lib/python3.10/dist-packages/draccus/argparsing.py\", line 203, in wrapper_inner\n","    response = fn(cfg, *args, **kwargs)\n","  File \"/content/drive/MyDrive/GT_Semester3/Deep RL (CS 8803 DRL)/Project/openvla/vla-scripts/finetune.py\", line 118, in finetune\n","    assert torch.cuda.is_available(), \"Fine-tuning assumes at least one GPU is available!\"\n","AssertionError: Fine-tuning assumes at least one GPU is available!\n","[2024-12-08 19:09:08,541] torch.distributed.elastic.multiprocessing.api: [ERROR] failed (exitcode: 1) local_rank: 0 (pid: 114995) of binary: /usr/bin/python3\n","Traceback (most recent call last):\n","  File \"/usr/local/bin/torchrun\", line 8, in <module>\n","    sys.exit(main())\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py\", line 347, in wrapper\n","    return f(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/run.py\", line 812, in main\n","    run(args)\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/run.py\", line 803, in run\n","    elastic_launch(\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py\", line 135, in __call__\n","    return launch_agent(self._config, self._entrypoint, list(args))\n","  File \"/usr/local/lib/python3.10/dist-packages/torch/distributed/launcher/api.py\", line 268, in launch_agent\n","    raise ChildFailedError(\n","torch.distributed.elastic.multiprocessing.errors.ChildFailedError: \n","============================================================\n","vla-scripts/finetune.py FAILED\n","------------------------------------------------------------\n","Failures:\n","  <NO_OTHER_FAILURES>\n","------------------------------------------------------------\n","Root Cause (first observed failure):\n","[0]:\n","  time      : 2024-12-08_19:09:08\n","  host      : 5cf0734d5c57\n","  rank      : 0 (local_rank: 0)\n","  exitcode  : 1 (pid: 114995)\n","  error_file: <N/A>\n","  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html\n","============================================================\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"vEo_Bj51d4rr"},"execution_count":null,"outputs":[]}]}